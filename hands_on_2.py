# -*- coding: utf-8 -*-
"""Hands On 2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iZTELZYl9xAVPNArwiUwGza7qWlQPE72
"""

import numpy as np
import matplotlib.pyplot as plt


class LinearRegression:
    def __init__(self):
        self.B_0 = None  # Intersección (intercept)
        self.B_1 = None  # Pendiente (slope)
        self.equation = None  # Ecuación de regresión

    def fit(self, X, y):
        """Ajusta el modelo de regresión lineal a los datos."""
        n = len(X)
        mean_x = np.mean(X)
        mean_y = np.mean(y)

        # Calcular B1 (pendiente)
        numerador = sum((X - mean_x) * (y - mean_y))
        denominador = sum((X - mean_x) ** 2)
        self.B_1 = numerador / denominador

        # Calcular B0 (intersección)
        self.B_0 = mean_y - self.B_1 * mean_x

        # Guardar la ecuación de regresión
        self.equation = f"y = {self.B_0:.2f} + {self.B_1:.2f}x"

    def predict(self, X_new):
        """Realiza predicciones usando el modelo ajustado."""
        if self.B_0 is None or self.B_1 is None:
            raise ValueError("El modelo no ha sido ajustado. Llame al método fit() primero.")
        return self.B_0 + self.B_1 * X_new

    def get_equation(self):
        """Devuelve la ecuación de regresión."""
        return self.equation

class DataProcessor:
    def __init__(self, advertising, sales):
        self.advertising = advertising
        self.sales = sales

    def get_data(self):
        """Devuelve los datos de entrada y salida."""
        return self.advertising, self.sales


def main():
    # Datos hardcodeados
    advertising = np.array([23, 26, 30, 34, 43, 48, 52, 57, 58])
    sales = np.array([651, 762, 856, 1063, 1190, 1298, 1421, 1440, 1518])

    # Procesar datos
    data_processor = DataProcessor(advertising, sales)
    X, y = data_processor.get_data()

    # Crear y ajustar el modelo
    model = LinearRegression()
    model.fit(X, y)

    # Imprimir la ecuación de regresión
    print("Ecuación de regresión:", model.get_equation())

    # Valores de Advertising no presentes en el dataset
    new_advertising_values = np.array([25, 35, 45, 50, 60])

    # Realizar predicciones
    predicted_sales = model.predict(new_advertising_values)

    # Imprimir predicciones
    print("\nPredicciones de Sales para nuevos valores de Advertising:")
    for adv, pred in zip(new_advertising_values, predicted_sales):
        print(f"Para x = {adv}, y = {pred:.2f}")



if __name__ == "__main__":
    main()